{
  "version": 3,
  "sources": ["../src/menu-bar.tsx", "../src/network-services.ts"],
  "sourcesContent": ["import { MenuBarExtra, showToast, Toast } from \"@raycast/api\";\nimport { NetworkService, normalizeHardwarePort, openNetworkSettings, useNetworkServices } from \"./network-services\";\n\nexport default function Command() {\n  const {\n    isLoading,\n    error,\n    favoriteServices,\n    invalidServices,\n    otherServices,\n    getActionForService,\n    hideInvalidDevices,\n  } = useNetworkServices();\n\n  if (error) {\n    showToast(Toast.Style.Failure, \"Something went wrong\", error.message);\n  }\n\n  const isConnected = [...favoriteServices, ...otherServices, ...(!hideInvalidDevices ? invalidServices : [])].some(\n    (s) => s.status === \"connected\",\n  );\n\n  return (\n    <MenuBarExtra\n      icon={isConnected ? \"network-connected.png\" : \"network-disconnected.png\"}\n      tooltip=\"Network Services\"\n      isLoading={isLoading}\n    >\n      {favoriteServices.length > 0 && (\n        <MenuBarExtra.Section title=\"Favorites\">\n          {favoriteServices.map((service) => (\n            <NetworkServiceItem key={service.id} service={service} />\n          ))}\n        </MenuBarExtra.Section>\n      )}\n      {otherServices.length > 0 && (\n        <MenuBarExtra.Section title=\"VPN Services\">\n          {otherServices.map((service) => (\n            <NetworkServiceItem key={service.id} service={service} />\n          ))}\n        </MenuBarExtra.Section>\n      )}\n      {!hideInvalidDevices && invalidServices.length > 0 && (\n        <MenuBarExtra.Section title=\"Other Services\">\n          {invalidServices.map((service) => (\n            <NetworkServiceItem key={service.id} service={service} />\n          ))}\n        </MenuBarExtra.Section>\n      )}\n      <MenuBarExtra.Section>\n        <MenuBarExtra.Item title=\"Open Network Settings\u2026\" onAction={openNetworkSettings} />\n      </MenuBarExtra.Section>\n    </MenuBarExtra>\n  );\n\n  function NetworkServiceItem({ service }: { service: NetworkService }) {\n    const actionDetails = getActionForService(service);\n\n    return (\n      <MenuBarExtra.Item\n        icon={actionDetails.icon}\n        title={service.name}\n        subtitle={normalizeHardwarePort(service.hardwarePort, service.name)}\n        onAction={actionDetails.action}\n      />\n    );\n  }\n}\n", "import { useState, useEffect, useMemo } from \"react\";\nimport { exec } from \"child_process\";\nimport { Icon, LocalStorage, Toast, getPreferenceValues, showToast } from \"@raycast/api\";\n\ntype Preferences = {\n  hideInvalidDevices: boolean;\n  sortBy: \"ascService\" | \"descService\" | \"ascType\" | \"descType\";\n};\n\nexport type NetworkService = {\n  id: string;\n  name: string;\n  hardwarePort: string;\n  device: string;\n  status: NetworkServiceStatus;\n  favorite: boolean;\n  order: number;\n};\n\ntype NetworkServiceStatus = \"connected\" | \"connecting\" | \"disconnecting\" | \"disconnected\" | \"invalid\";\n\nexport function useNetworkServices() {\n  const { sortBy, hideInvalidDevices } = getPreferenceValues<Preferences>();\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | undefined>(undefined);\n  const [networkServices, setNetworkServices] = useState<Record<string, NetworkService>>({});\n  const [favorites, setFavorites] = useState<Record<string, boolean>>({});\n  const [favoriteOrder, setFavoriteOrder] = useState<Record<string, number>>({});\n\n  useEffect(() => {\n    const loadData = async () => {\n      const favs = await loadFavorites();\n      const order = await loadFavoriteOrder();\n      setFavorites(favs);\n      setFavoriteOrder(order);\n      await fetchDataWithFavorites(favs, order);\n    };\n\n    loadData();\n  }, []);\n\n  const updateServiceStatus = async (service: NetworkService, status: NetworkServiceStatus) => {\n    const networkServiceName = service.name.replace(/\"/g, '\\\\\"');\n    const command =\n      status === \"connecting\"\n        ? `/usr/sbin/networksetup -connectpppoeservice \"${networkServiceName}\"`\n        : `/usr/sbin/networksetup -disconnectpppoeservice \"${networkServiceName}\"`;\n\n    try {\n      await execPromise(command);\n      setNetworkServices((currentServices) => ({\n        ...currentServices,\n        [service.id]: { ...service, status },\n      }));\n      const updatedStatus = await waitForFinalServiceStatus(service);\n      setNetworkServices((currentServices) => ({\n        ...currentServices,\n        [service.id]: { ...service, status: updatedStatus },\n      }));\n    } catch (err) {\n      setError(err as Error);\n    }\n  };\n\n  const fetchServiceStatus = async (service: NetworkService) => {\n    try {\n      const status = await showPPPoEStatus(service.name);\n      setNetworkServices((currentServices) => ({\n        ...currentServices,\n        [service.id]: { ...service, status },\n      }));\n    } catch (err) {\n      setError(err as Error);\n    }\n  };\n\n  const waitForFinalServiceStatus = (service: NetworkService) =>\n    new Promise<NetworkServiceStatus>((resolve) => {\n      const checkStatus = async () => {\n        try {\n          const status = await showPPPoEStatus(service.name);\n\n          if (status === \"connected\" || status === \"disconnected\") {\n            resolve(status);\n          } else {\n            setTimeout(checkStatus, 500);\n          }\n        } catch (err) {\n          // If there's an error, we'll continue polling\n          setTimeout(checkStatus, 500);\n        }\n      };\n\n      checkStatus();\n    });\n\n  const addToFavorites = async (service: NetworkService) => {\n    const updatedFavorites = { ...favorites, [service.id]: true };\n    setFavorites(updatedFavorites);\n    saveFavorites(updatedFavorites);\n    const updatedOrder = { ...favoriteOrder, [service.id]: Object.keys(favoriteOrder).length };\n    setFavoriteOrder(updatedOrder);\n    saveFavoriteOrder(updatedOrder);\n    setNetworkServices((currentServices) => ({\n      ...currentServices,\n      [service.id]: { ...service, favorite: true, order: updatedOrder[service.id] },\n    }));\n  };\n\n  const removeFromFavorites = async (service: NetworkService) => {\n    const updatedFavorites = { ...favorites };\n    delete updatedFavorites[service.id];\n    setFavorites(updatedFavorites);\n    saveFavorites(updatedFavorites);\n\n    const updatedOrder = { ...favoriteOrder };\n    delete updatedOrder[service.id];\n    setFavoriteOrder(updatedOrder);\n    saveFavoriteOrder(updatedOrder);\n    setNetworkServices((currentServices) => ({\n      ...currentServices,\n      [service.id]: { ...service, favorite: false, order: 0 },\n    }));\n  };\n\n  const moveFavoriteUp = (service: NetworkService) => {\n    const keys = Object.keys(favoriteOrder).sort((a, b) => favoriteOrder[a] - favoriteOrder[b]);\n    const index = keys.indexOf(service.id);\n    if (index > 0) {\n      const previousKey = keys[index - 1];\n      const newOrder = { ...favoriteOrder };\n\n      // Swap orders with the previous favorite\n      const temp = newOrder[previousKey];\n      newOrder[previousKey] = newOrder[service.id];\n      newOrder[service.id] = temp;\n\n      setFavoriteOrder(newOrder);\n      saveFavoriteOrder(newOrder);\n\n      setNetworkServices((currentServices) => ({\n        ...currentServices,\n        [service.id]: { ...service, order: newOrder[service.id] },\n        [previousKey]: { ...currentServices[previousKey], order: newOrder[previousKey] },\n      }));\n    }\n  };\n\n  const moveFavoriteDown = (service: NetworkService) => {\n    const keys = Object.keys(favoriteOrder).sort((a, b) => favoriteOrder[a] - favoriteOrder[b]);\n    const index = keys.indexOf(service.id);\n    if (index < keys.length - 1) {\n      const nextKey = keys[index + 1];\n      const newOrder = { ...favoriteOrder };\n\n      // Swap orders with the next favorite\n      const temp = newOrder[nextKey];\n      newOrder[nextKey] = newOrder[service.id];\n      newOrder[service.id] = temp;\n\n      setFavoriteOrder(newOrder);\n      saveFavoriteOrder(newOrder);\n\n      setNetworkServices((currentServices) => ({\n        ...currentServices,\n        [service.id]: { ...service, order: newOrder[service.id] },\n        [nextKey]: { ...currentServices[nextKey], order: newOrder[nextKey] },\n      }));\n    }\n  };\n\n  const connectToPPPoEService = (service: NetworkService) => updateServiceStatus(service, \"connecting\");\n  const disconnectFromPPPoEService = (service: NetworkService) => updateServiceStatus(service, \"disconnecting\");\n\n  const fetchDataWithFavorites = async (favs: Record<string, boolean>, order: Record<string, number>) => {\n    try {\n      const output = await listNetworkServiceOrder();\n      const denylist = [\"Wi-Fi\", \"Bluetooth PAN\", \"Thunderbolt Bridge\"];\n      const lines = output.split(\"\\n\");\n      const serviceLines = lines.slice(1).join(\"\\n\");\n\n      const services = parseServices(serviceLines).filter((service) => !denylist.includes(service.name));\n      const serviceStatuses = await Promise.all(\n        services.map((service) =>\n          showPPPoEStatus(service.name).then((status) => ({\n            ...service,\n            status,\n            favorite: !!favs[service.id],\n            order: order[service.id] ?? 0,\n          })),\n        ),\n      );\n      const servicesMap = serviceStatuses.reduce(\n        (acc, service) => ({ ...acc, [service.id]: service }),\n        {} as Record<string, NetworkService>,\n      );\n\n      setNetworkServices(servicesMap);\n    } catch (err) {\n      setError(err as Error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const getActionForService = (service: NetworkService) =>\n    ({\n      disconnected: { actionName: \"Connect\", action: () => connectToPPPoEService(service), icon: Icon.Circle },\n      connected: { actionName: \"Disconnect\", action: () => disconnectFromPPPoEService(service), icon: Icon.Checkmark },\n      connecting: { actionName: undefined, action: undefined, icon: Icon.CircleEllipsis },\n      disconnecting: { actionName: undefined, action: undefined, icon: Icon.CircleEllipsis },\n      invalid: { actionName: undefined, action: undefined, icon: Icon.XMarkCircle },\n    })[service.status] || { icon: Icon.XMarkCircle };\n\n  const favoriteServices = useMemo(\n    () =>\n      sortNetworkServices(\n        Object.values(networkServices).filter((service) => service.favorite),\n        sortBy,\n      ),\n    [networkServices, sortBy],\n  );\n  const otherServices = useMemo(\n    () =>\n      sortNetworkServices(\n        Object.values(networkServices).filter((service) => !service.favorite && service.status !== \"invalid\"),\n        sortBy,\n      ),\n    [networkServices, sortBy],\n  );\n  const invalidServices = useMemo(\n    () =>\n      sortNetworkServices(\n        Object.values(networkServices).filter((service) => service.status === \"invalid\"),\n        sortBy,\n      ),\n    [networkServices, sortBy],\n  );\n\n  return {\n    isLoading,\n    error,\n    favoriteServices,\n    otherServices,\n    invalidServices,\n    fetchServiceStatus,\n    addToFavorites,\n    removeFromFavorites,\n    moveFavoriteUp,\n    moveFavoriteDown,\n    getActionForService,\n    hideInvalidDevices,\n  };\n}\n\nexport function normalizeHardwarePort(hardwarePort: string, name: string) {\n  return (\n    {\n      \"com.wireguard.macos\": \"WireGuard\",\n      [name]: \"\",\n    }[hardwarePort] || hardwarePort\n  );\n}\n\nexport function openNetworkSettings() {\n  exec(\"open x-apple.systempreferences:com.apple.Network-Settings.extension\", (err) => {\n    if (err) {\n      showToast({\n        title: \"Error\",\n        message: \"Could not open Network Settings\",\n        style: Toast.Style.Failure,\n      });\n    }\n  });\n}\n\nconst sortNetworkServices = (\n  services: NetworkService[],\n  sortBy: \"ascService\" | \"descService\" | \"ascType\" | \"descType\",\n): NetworkService[] =>\n  services.sort((a, b) => {\n    // Sort active statuses first\n    if (activeStatusOrder.includes(a.status) && !activeStatusOrder.includes(b.status)) return -1;\n    if (!activeStatusOrder.includes(a.status) && activeStatusOrder.includes(b.status)) return 1;\n\n    // Then sort by favorites and order\n    if (a.favorite && !b.favorite) return -1;\n    if (!a.favorite && b.favorite) return 1;\n    if (a.favorite && b.favorite) return a.order - b.order;\n\n    // Invalid services go to the bottom\n    if (a.status === \"invalid\") return 1;\n    if (b.status === \"invalid\") return -1;\n\n    const order = sortBy.startsWith(\"asc\") ? 1 : -1;\n\n    let compA = a.name,\n      compB = b.name;\n    if (sortBy.includes(\"Type\")) {\n      compA = normalizeHardwarePort(a.hardwarePort, a.name);\n      compB = normalizeHardwarePort(b.hardwarePort, b.name);\n    }\n\n    const primaryComparison = compA.localeCompare(compB) * order;\n\n    // Secondary sorting by name if the primary comparison is equal\n    if (primaryComparison === 0) {\n      return a.name.localeCompare(b.name) * order;\n    }\n\n    return primaryComparison;\n  });\n\n// Local storage keys\nconst FAVORITES_KEY = \"network-service-favorites\";\nconst FAVORITES_ORDER_KEY = \"network-service-favorites-order\";\n\nconst loadFavorites = async (): Promise<Record<string, boolean>> => {\n  const favorites = await LocalStorage.getItem<string>(FAVORITES_KEY);\n  return favorites ? JSON.parse(favorites) : {};\n};\n\nconst saveFavorites = async (favorites: Record<string, boolean>) => {\n  await LocalStorage.setItem(FAVORITES_KEY, JSON.stringify(favorites));\n};\n\nconst loadFavoriteOrder = async (): Promise<Record<string, number>> => {\n  const order = await LocalStorage.getItem<string>(FAVORITES_ORDER_KEY);\n  return order ? JSON.parse(order) : {};\n};\n\nconst saveFavoriteOrder = async (order: Record<string, number>) => {\n  await LocalStorage.setItem(FAVORITES_ORDER_KEY, JSON.stringify(order));\n};\n\nconst execPromise = (command: string): Promise<string> =>\n  new Promise((resolve, reject) => {\n    exec(command, (err, stdout) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(stdout.trim());\n      }\n    });\n  });\n\nconst listNetworkServiceOrder = (): Promise<string> => execPromise(\"/usr/sbin/networksetup -listnetworkserviceorder\");\n\nconst parseServices = (text: string): NetworkService[] => {\n  const regex = /\\((\\d+)\\)\\s+(.*?)\\s+\\(Hardware Port: (.*?), Device: (.*?)\\)/g;\n  return Array.from(text.matchAll(regex)).map((item) => ({\n    id: item[1],\n    name: item[2],\n    hardwarePort: item[3],\n    device: item[4],\n    status: \"disconnected\",\n    favorite: false, // Default to not favorite\n    order: 0, // Default order\n  }));\n};\n\nconst showPPPoEStatus = (networkServiceName: string): Promise<NetworkServiceStatus> => {\n  networkServiceName = networkServiceName.replace(/\"/g, '\\\\\"');\n  return execPromise(\n    `/usr/sbin/networksetup -showpppoestatus \"${networkServiceName}\"`,\n  ) as Promise<NetworkServiceStatus>;\n};\n\nconst activeStatusOrder = [\"connected\", \"connecting\", \"disconnecting\"];\n"],
  "mappings": "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",
  "names": ["menu_bar_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_child_process", "import_api", "useNetworkServices", "sortBy", "hideInvalidDevices", "isLoading", "setIsLoading", "error", "setError", "networkServices", "setNetworkServices", "favorites", "setFavorites", "favoriteOrder", "setFavoriteOrder", "favs", "loadFavorites", "order", "loadFavoriteOrder", "fetchDataWithFavorites", "updateServiceStatus", "service", "status", "networkServiceName", "command", "execPromise", "currentServices", "updatedStatus", "waitForFinalServiceStatus", "err", "fetchServiceStatus", "showPPPoEStatus", "resolve", "checkStatus", "addToFavorites", "updatedFavorites", "saveFavorites", "updatedOrder", "saveFavoriteOrder", "removeFromFavorites", "moveFavoriteUp", "keys", "a", "b", "index", "previousKey", "newOrder", "temp", "moveFavoriteDown", "nextKey", "connectToPPPoEService", "disconnectFromPPPoEService", "output", "listNetworkServiceOrder", "denylist", "serviceLines", "services", "parseServices", "servicesMap", "acc", "getActionForService", "favoriteServices", "sortNetworkServices", "otherServices", "invalidServices", "normalizeHardwarePort", "hardwarePort", "name", "openNetworkSettings", "activeStatusOrder", "compA", "compB", "primaryComparison", "FAVORITES_KEY", "FAVORITES_ORDER_KEY", "reject", "stdout", "text", "regex", "item", "import_jsx_runtime", "Command", "isLoading", "error", "favoriteServices", "invalidServices", "otherServices", "getActionForService", "hideInvalidDevices", "useNetworkServices", "isConnected", "s", "service", "NetworkServiceItem", "openNetworkSettings", "actionDetails", "normalizeHardwarePort"]
}
